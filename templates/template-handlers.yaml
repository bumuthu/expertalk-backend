AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Globals:
  Function:
    MemorySize: 256
    Timeout: 30
    Runtime: nodejs20.x
    CodeUri: .
    Environment:
      Variables:
        TALK_AWS_REGION: !Sub ${AWS::Region}
        TALK_ENV_NAME: !Sub ${EnvironmentName}
        TALK_AWS_ACCOUNT_ID: !Sub ${AWS::AccountId}
        TALK_MONGO_PATH: !Sub ${MongoPath}
        TALK_COGNITO_USER_POOL_ID: !Sub ${CognitoUserPoolId}
        TALK_COGNITO_USER_POOL_CLIENT: !Sub ${CognitoUserPoolClient}
        TALK_STRIPE_SECRET_KEY: !Sub ${StripeSecretKey}

Resources:
  # API resource
  RESTApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub '${ApiGatewayName}-rest'
      StageName: !Ref StageName
      Cors:
        AllowOrigin: "'*'"
        AllowHeaders: "'*'"
        AllowMethods: "'*'"
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        AddDefaultAuthorizerToCorsPreflight: false
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPoolId}


  # Handlers
  PublicHandler:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: lib/handlers/public-handlers.handler
      FunctionName: !Sub 'talk-${EnvironmentName}-PublicHandler'
      Events:
        PublicUserCreateEvent:
          Type: Api
          Properties:
            RestApiId: !Ref RESTApi
            Path: /public/user
            Method: POST

  UserWorkspaceHandler:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: lib/handlers/user-workspace-handlers.handler
      FunctionName: !Sub 'talk-${EnvironmentName}-UserWorkspaceHandler'
      Events:
        GetUserEvent:
          Type: Api
          Properties:
            RestApiId: !Ref RESTApi
            Path: /user
            Method: GET
        UpdateUserEvent:
          Type: Api
          Properties:
            RestApiId: !Ref RESTApi
            Path: /user
            Method: PUT

  # POST v1/user
  UserCreateHandler:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: lib/handlers/user-workspace-handlers.handler
      FunctionName: !Sub 'talk-${EnvironmentName}-UserCreateHandler'
      Events:
        HttpEvent:
          Type: Api
          Properties:
            RestApiId: !Ref RESTApi
            Path: /user
            Method: POST
            Auth:
              Authorizer: NONE

  # PUT v1/user
  UserUpdateByTokenHandler:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: lib/handlers/user-workspace-handlers.handler
      FunctionName: !Sub 'talk-${EnvironmentName}-UserUpdateByTokenHandler'
      Events:
        HttpEvent:
          Type: Api
          Properties:
            RestApiId: !Ref RESTApi
            Path: /user
            Method: PUT


# System Config handlers

  # GET v1/sys-configs/{name}
  SysConfigsRetrievalHandler:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: lib/handlers/sys-configs-handlers/sys-configs-retrieval-handlers.handler
      FunctionName: !Sub 'talk-${EnvironmentName}-SysConfigsRetrievalHandler'
      Events:
        HttpEvent:
          Type: Api
          Properties:
            RestApiId: !Ref RESTApi
            Path: /sys-configs/{name}
            Method: GET

  # PUT v1/sys-configs/{name}
  SysConfigsUpdateHandler:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: lib/handlers/sys-configs-handlers/sys-configs-update-handler.handler
      FunctionName: !Sub 'talk-${EnvironmentName}-SysConfigsUpdateHandler'
      Events:
        HttpEvent:
          Type: Api
          Properties:
            RestApiId: !Ref RESTApi
            Path: /sys-configs
            Method: PUT

  # Schedulled function to validate user billings
  # UserBillingValidationHandler:
  #   Type: 'AWS::Serverless::Function'
  #   Properties:
  #     Handler: lib/handlers/sys-configs-handlers/user-billing-validation-handler.handler
  #     FunctionName: !Sub 'talk-${EnvironmentName}-UserBillingValidationHandler'

  # UserBillingValidationEventRule: 
  #   Type: AWS::Events::Rule
  #   Properties: 
  #     State: "ENABLED"
  #     ScheduleExpression: "rate(1 hour)"
  #     Targets: 
  #       - 
  #         Arn: 
  #           Fn::GetAtt: 
  #             - "UserBillingValidationHandler"
  #             - "Arn"
  #         Id: "UserBillingValidationHandler"

  # PermissionUserBillingValidationHandler: 
  #   Type: AWS::Lambda::Permission
  #   Properties: 
  #     FunctionName: 
  #       Ref: "UserBillingValidationHandler"
  #     Action: "lambda:InvokeFunction"
  #     Principal: "events.amazonaws.com"
  #     SourceArn: 
  #       Fn::GetAtt: 
  #         - "UserBillingValidationEventRule"
  #         - "Arn"


Parameters:
  EnvironmentName:
    Type: String
  StageName:
    Type: String
  ApiGatewayName:
    Type: String
  MongoPath:
    Type: String
  CognitoUserPoolId:
    Type: String
  CognitoUserPoolClient:
    Type: String
  StripeSecretKey:
    Type: String